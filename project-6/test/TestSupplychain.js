// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require("SupplyChain");

contract("SupplyChain", function (accounts) {
  // Declare few constants and assign a few sample accounts generated by ganache-cli
  var sku = 1;
  var upc = 1;
  const ownerID = accounts[0];
  const originFarmerID = accounts[1];
  const originFarmName = "John Doe";
  const originFarmInformation = "Yarray Valley";
  const originFarmLatitude = "-38.239770";
  const originFarmLongitude = "144.341490";
  var productID = sku + upc;
  const productNotes = "Best beans for Espresso";
  const productPrice = web3.toWei(1, "ether");
  var itemState = 0;
  const distributorID = accounts[2];
  const retailerID = accounts[3];
  const consumerID = accounts[4];
  const emptyAddress = "0x00000000000000000000000000000000000000";

  ///Available Accounts
  ///==================
  ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
  ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
  ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
  ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
  ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
  ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
  ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
  ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
  ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
  ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

  console.log("ganache-cli accounts used here...");
  console.log("Contract Owner: accounts[0] ", accounts[0]);
  console.log("Farmer: accounts[1] ", accounts[1]);
  console.log("Distributor: accounts[2] ", accounts[2]);
  console.log("Retailer: accounts[3] ", accounts[3]);
  console.log("Consumer: accounts[4] ", accounts[4]);

  // 1st Test
  it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    var eventEmitted = false;

    // Watch the emitted event Harvested()
    var event = supplyChain.Harvested();
    await event.watch((err, res) => {
      eventEmitted = true;
    });

    // Mark an item as Harvested by calling function harvestItem()
    await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes);

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const itemBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(itemBufferOne[0], sku);
    assert.equal(itemBufferOne[1], upc);
    assert.equal(itemBufferOne[2], originFarmerID);
    assert.equal(itemBufferOne[3], originFarmerID);
    assert.equal(itemBufferOne[4], originFarmName);
    assert.equal(itemBufferOne[5], originFarmInformation);
    assert.equal(itemBufferOne[6], originFarmLatitude);
    assert.equal(itemBufferOne[7], originFarmLongitude);
    assert.equal(itemBufferTwo[5], 0);
    assert.equal(eventEmitted, true);
  });

  // 2nd Test
  it("Testing smart contract function processItem() that allows a farmer to process coffee", async () => {
    const supplyChain = await SupplyChain.deployed();
    var eventEmitted = false;
    var event = supplyChain.Processed();
   
    await event.watch((err, res) => {
      eventEmitted = true;
      itemState = 1;
    });

    await supplyChain.processItem(upc, { from: originFarmerID });

    const itemBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    assert.equal(itemBufferOne[0], sku);
    assert.equal(itemBufferOne[1], upc);
    assert.equal(itemBufferOne[2], originFarmerID);
    assert.equal(itemBufferOne[3], originFarmerID);
    assert.equal(itemBufferOne[4], originFarmName);
    assert.equal(itemBufferOne[5], originFarmInformation);
    assert.equal(itemBufferOne[6], originFarmLatitude);
    assert.equal(itemBufferOne[7], originFarmLongitude);
    assert.equal(itemBufferTwo[5], 1);
    assert.equal(eventEmitted, true);
  });

  // 3rd Test
  it("Testing smart contract function packItem() that allows a farmer to pack coffee", async () => {
    const supplyChain = await SupplyChain.deployed();
    var eventEmitted = false;
    var event = supplyChain.Packed();
    await event.watch((err, res) => {
      eventEmitted = true;
      itemState = 2;
    });

    await supplyChain.packItem(upc, { from: originFarmerID });

    const itemBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    assert.equal(itemBufferOne[0], sku);
    assert.equal(itemBufferOne[1], upc);
    assert.equal(itemBufferOne[2], originFarmerID);
    assert.equal(itemBufferOne[3], originFarmerID);
    assert.equal(itemBufferOne[4], originFarmName);
    assert.equal(itemBufferOne[5], originFarmInformation);
    assert.equal(itemBufferOne[6], originFarmLatitude);
    assert.equal(itemBufferOne[7], originFarmLongitude);
    assert.equal(itemBufferTwo[5], itemState);
    assert.equal(eventEmitted, true);
  });

  // 4th Test
  it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async () => {
    const supplyChain = await SupplyChain.deployed();
    var eventEmitted = false;
    var event = supplyChain.ForSale();
    await event.watch((err, res) => {
      eventEmitted = true;
      itemState = 3;
    });

    await supplyChain.sellItem(upc, productPrice, { from: originFarmerID });

    const itemBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    assert.equal(itemBufferOne[0], sku, "Error: Invalid item SKU");
    assert.equal(itemBufferOne[1], upc, "Error: Invalid item UPC");
    assert.equal(itemBufferOne[2], originFarmerID);
    assert.equal(itemBufferOne[3], originFarmerID);
    assert.equal(itemBufferOne[4], originFarmName);
    assert.equal(itemBufferOne[5], originFarmInformation);
    assert.equal(itemBufferOne[6], originFarmLatitude);
    assert.equal(itemBufferOne[7], originFarmLongitude);
    assert.equal(itemBufferTwo[4], productPrice);
    assert.equal(itemBufferTwo[5], 3);
    assert.equal(eventEmitted, true);
  });

  // 5th Test
  it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async () => {
    const supplyChain = await SupplyChain.deployed();
    var eventEmitted = false;
    var event = supplyChain.Sold();
    await event.watch((err, res) => {
      eventEmitted = true;
      itemState = 4;
    });

    await supplyChain.buyItem(upc, {
      from: distributorID,
      value: productPrice,
    });

    const itemBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    assert.equal(itemBufferOne[0], sku, "Error: Invalid item SKU");
    assert.equal(itemBufferOne[1], upc, "Error: Invalid item UPC");
    assert.equal(itemBufferOne[2], distributorID);
    assert.equal(itemBufferOne[3], originFarmerID);
    assert.equal(itemBufferOne[4], originFarmName);
    assert.equal(itemBufferOne[5], originFarmInformation);
    assert.equal(itemBufferOne[6], originFarmLatitude);
    assert.equal(itemBufferOne[7], originFarmLongitude);
    assert.equal(itemBufferTwo[4], productPrice);
    assert.equal(itemBufferTwo[5], 4);
    assert.equal(itemBufferTwo[6], distributorID);
    assert.equal(eventEmitted, true);
  });

  // 6th Test
  it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async () => {
    const supplyChain = await SupplyChain.deployed();
    var eventEmitted = false;

    var event = supplyChain.Shipped();
    await event.watch((err, res) => {
      eventEmitted = true;
      itemState = 5;
    });

    await supplyChain.shipItem(upc, { from: distributorID });

    const itemBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    assert.equal(itemBufferOne[0], sku);
    assert.equal(itemBufferOne[1], upc);
    assert.equal(itemBufferOne[2], distributorID);
    assert.equal(itemBufferOne[3], originFarmerID);
    assert.equal(itemBufferOne[4], originFarmName);
    assert.equal(itemBufferOne[5], originFarmInformation);
    assert.equal(itemBufferOne[6], originFarmLatitude);
    assert.equal(itemBufferOne[7], originFarmLongitude);
    assert.equal(itemBufferTwo[4], productPrice);
    assert.equal(itemBufferTwo[5], 5);
    assert.equal(itemBufferTwo[6], distributorID);
    assert.equal(eventEmitted, true);
  });

  // 7th Test
  it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async () => {
    const supplyChain = await SupplyChain.deployed();

    await supplyChain.addRetailer(retailerID);
    var eventEmitted = false;
    var event = supplyChain.Received();
    await event.watch((err, res) => {
      eventEmitted = true;
      itemState = 6;
    });

    await supplyChain.receiveItem(upc, { from: retailerID });

    const itemBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    assert.equal(itemBufferOne[0], sku);
    assert.equal(itemBufferOne[1], upc);
    assert.equal(itemBufferOne[2], retailerID);
    assert.equal(itemBufferOne[3], originFarmerID);
    assert.equal(itemBufferOne[4], originFarmName);
    assert.equal(itemBufferOne[5], originFarmInformation);
    assert.equal(itemBufferOne[6], originFarmLatitude);
    assert.equal(itemBufferOne[7], originFarmLongitude);
    assert.equal(itemBufferTwo[4], productPrice);
    assert.equal(itemBufferTwo[5], 6);
    assert.equal(itemBufferTwo[6], distributorID);
    assert.equal(itemBufferTwo[7], retailerID);
    assert.equal(eventEmitted, true);
  });

  // 8th Test
  it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    await supplyChain.addConsumer(consumerID);

    var eventEmitted = false;

    var event = supplyChain.Purchased();
    await event.watch((err, res) => {
      eventEmitted = true;
      itemState = 7;
    });

    await supplyChain.purchaseItem(upc, { from: consumerID });

    const itemBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    assert.equal(itemBufferOne[0], sku);
    assert.equal(itemBufferOne[1], upc);
    assert.equal(itemBufferOne[2], consumerID);
    assert.equal(itemBufferOne[3], originFarmerID);
    assert.equal(itemBufferOne[4], originFarmName);
    assert.equal(itemBufferOne[5], originFarmInformation);
    assert.equal(itemBufferOne[6], originFarmLatitude);
    assert.equal(itemBufferOne[7], originFarmLongitude);
    assert.equal(itemBufferTwo[2], productID);
    assert.equal(itemBufferTwo[4], productPrice);
    assert.equal(itemBufferTwo[5], itemState);
    assert.equal(itemBufferTwo[6], distributorID);
    assert.equal(itemBufferTwo[7], retailerID);
    assert.equal(itemBufferTwo[8], consumerID);
    assert.equal(eventEmitted, true);
  });

  // 9th Test
  it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async () => {
    const supplyChain = await SupplyChain.deployed();

    const itemBufferOne = await supplyChain.fetchItemBufferOne.call(upc);

    assert.equal(itemBufferOne[0], sku);
    assert.equal(itemBufferOne[1], upc);
    assert.equal(itemBufferOne[2], consumerID);
    assert.equal(itemBufferOne[3], originFarmerID);
    assert.equal(itemBufferOne[4], originFarmName);
    assert.equal(itemBufferOne[5], originFarmInformation);
    assert.equal(itemBufferOne[6], originFarmLatitude);
    assert.equal(itemBufferOne[7], originFarmLongitude);
  });

  // 10th Test
  it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async () => {
    const supplyChain = await SupplyChain.deployed();

    const itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    assert.equal(itemBufferTwo[0], sku);
    assert.equal(itemBufferTwo[1], upc);
    assert.equal(itemBufferTwo[2], productID);
    assert.equal(itemBufferTwo[3], productNotes);
    assert.equal(itemBufferTwo[4], productPrice);
    assert.equal(itemBufferTwo[5], itemState);
    assert.equal(itemBufferTwo[6], distributorID);
    assert.equal(itemBufferTwo[7], retailerID);
    assert.equal(itemBufferTwo[8], consumerID);
  });
});